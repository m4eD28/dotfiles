#     _      _
#  __| | ___(_)_ __
# / _` |/ _ \ | '_ \ 
#| (_| |  __/ | | | |
# \__,_|\___|_|_| |_|
#--------------------

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
source /Users/maedar/dotfiles/.config/nvim/Lightline.rc.vim
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
source /Users/maedar/dotfiles/.config/nvim/NerdTree.rc.vim
'''

[[plugins]]
repo = 'cohama/lexima.vim'
#hook_add = '''
#  source /Users/maedar/dotfiles/.config/nvim/lexima.rc.vim
#'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'vim-scripts/closetag.vim'
hook_add = '''
  let g:closetag_html_style = 1
'''
#<C-_>

[[plugins]]
repo = 'sophacles/vim-processing'
hook_add = '''
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_add = '''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_member_variable_highlight = 1
  let g:cpp_class_decl_highlight = 1
  let g:cpp_experimental_simple_template_highlight = 1
  let g:cpp_experimental_template_highlight = 1
  let g:cpp_concepts_highlight = 1
  let g:cpp_no_function_highlight = 1
'''

[[plugins]]
repo = 'othree/html5.vim'
hook_add = '''
  let g:html5_event_handler_attributes_complete = 0
	let g:html5_rdfa_attributes_complete = 0
	let g:himl5_microdata_attributes_complete = 0
	let g:html5_aria_attributes_complete = 0
'''

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = './install.sh'
##depends = ['deoplete.nvim']
#hook_add = '''
#  source /Users/maedar/dotfiles/.config/nvim/LanguageClient-neovim.rc.vim
#'''

#[[plugins]]
#repo = 'plasticboy/vim-markdown'
#hook_add = '''
#  let g:vim_markdown_folding_disabled = 1
#'''
#
#[[plugins]]
#repo = 'kannokanno/previm'
#hook_add = '''
#  nnoremap <silent> <C-p> :PrevimOpen<CR>
#'''
#
#[[plugins]]
#repo = 'tyru/open-browser.vim'

#vim-lsp導入
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
if executable('clangd')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'clangd',
    \ 'cmd': {server_info->['clangd']},
    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
    \ })
endif
if executable('pyls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'pyls',
    \ 'cmd': {server_info->['pyls']},
    \ 'whitelist': ['python'],
    \ })
endif

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_enabled = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_highlights_enabled = 1
let g:lsp_signs_error = {'text': '!'}
let g:lsp_signs_warning = {'text': '!'}
let g:lsp_signs_hint = {'text' : '!'}

nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
nnoremap <buffer> gd :<C-u>LspDefinition<CR>
nnoremap <buffer> gD :<C-u>LspReferences<CR>
nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
nnoremap <buffer> K :<C-u>LspHover<CR>
" nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
" nnoremap <buffer> <F2> :<C-u>LspRename<CR>
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
# hook_add='''
# imap <C-k>     <Plug>(neosnippet_expand_or_jump)
# smap <C-k>     <Plug>(neosnippet_expand_or_jump)
# xmap <C-k>     <Plug>(neosnippet_expand_target)
#'''
