#     _      _
#  __| | ___(_)_ __
# / _` |/ _ \ | '_ \ 
#| (_| |  __/ | | | |
# \__,_|\___|_|_| |_|
#--------------------

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
source /Users/maedar/dotfiles/.config/nvim/Lightline.rc.vim
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
source /Users/maedar/dotfiles/.config/nvim/NerdTree.rc.vim
'''

[[plugins]]
repo = 'cohama/lexima.vim'
#hook_add = '''
#  source /Users/maedar/dotfiles/.config/nvim/lexima.rc.vim
#'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'vim-scripts/closetag.vim'
hook_add = '''
  let g:closetag_html_style = 1
'''

#vim-lsp導入
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
if executable('clangd')
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
    autocmd FileType c,cpp setlocal omnifunc=lsp#complete
endif

if executable('pyls')
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python', 'py'],
        \ })
    autocmd FileType python,py setlocal omnifunc=lsp#complete
endif

let g:lsp_log_verbose = 1  " デバッグ用ログを出力
let g:lsp_log_file = expand('~/dotfiles/.config/nvim/lsp.log')  "

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_highlights_enabled = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼', 'icon': '/path/to/some/icon'}
let g:lsp_signs_hint = {'icon': '/path/to/some/other/icon'}

nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
nnoremap <buffer> gd :<C-u>LspDefinition<CR>
nnoremap <buffer> gD :<C-u>LspReferences<CR>
nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
nnoremap <buffer> K :<C-u>LspHover<CR>
" nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
nnoremap <buffer> <F2> :<C-u>LspRename<CR>
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'
hook_add = '''
set completeopt-=preview
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add = '''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
# let g:ale_sign_column_always = 1
# let g:ale_sign_error = '⨉'
# let g:ale_sign_warning = '⚠'
# let g:ale_linters = {
#   \   'c' : ['clangd'],
#   \   'cpp' : ['clangd'],
#   \   'python': ['flake8']
# \}
# '''

# [[plugins]]
# repo = "jalvesaq/Nvim-R"
# hook_add = '''
# let vimrplugin_vsplit = 1
# let vimrplugin_assign = 0
# '''


#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = './install.sh'
##depends = ['deoplete.nvim']
#hook_add = '''
#  source /Users/maedar/dotfiles/.config/nvim/LanguageClient-neovim.rc.vim
#'''

#[[plugins]]
#repo = 'plasticboy/vim-markdown'
#hook_add = '''
#  let g:vim_markdown_folding_disabled = 1
#'''
#
#[[plugins]]
#repo = 'kannokanno/previm'
#hook_add = '''
#  nnoremap <silent> <C-p> :PrevimOpen<CR>
#'''
#
#[[plugins]]
#repo = 'tyru/open-browser.vim'
